Load Distribution Algorithm
In this exercise, use the Round Robin algorithm to distribute the load among the servers behind the Load Balancer.
1.2 Checking the Health Status of Backup Servers
Since it is possible for any of the backup servers to go offline at any time, you should periodically (you can choose this interval yourself) test all backup servers by sending a test request, and if they are not responsive, temporarily remove them from the list of backup servers until the next server test cycle.
1.3 Load Distribution
After completing the previous steps, it's time to get to the main task of the Load Balancer. For each request, the Load Balancer should establish a connection with a backup server and send the received requests to the server and return the server's response to the client.
Load Balancer Configuration 4.1
Your Load Balancer should extract the list of backup servers from a config file placed next to it and use them. The config file format is as follows:
[ip0] [port0]
[ip1] [port1]
[ip2] [port2]
...
Load Balancer Testing
To test your Load Balancer, assistants will bring up several instances of the services you provided above and run your Load Balancer. Then, a large number of requests will be sent to your Load Balancer, and the results of the requests will be examined. Ultimately, there should be approximately equal numbers of results from each instance.
Submission of Assignment
Your submission file should be in the following format:
[student_number]_PRACTICAL_2.zip
hash.txt // sha256 of your video file
server.py // or any other format
service.py // or any other format
README.md // anything about running your code?
url.txt // url to your video file
Note: You can also directly upload the video along with the code.